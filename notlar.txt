Django'nun ModelViewSet sınıfı aslında çok sayıda hazır (built-in) fonksiyonu miras alır.

Bu hazır fonksiyonlar şunları yapar:

GET /api/listings/ → get_queryset() fonksiyonunu çağırır.

POST /api/listings/ → perform_create() fonksiyonunu çağırır.

PUT /api/listings/5/ → perform_update() fonksiyonunu çağırır.

DELETE /api/listings/5/ → perform_destroy() fonksiyonunu çağırır.

------------------------------------------------------------------------------------------------------------------------------------


list() → bir HTTP GET isteği geldiğinde Django tarafından otomatik çağrılır.

list() çalışırken → verileri almak için get_queryset() fonksiyonunu çağırır.

Sen get_queryset() fonksiyonunu ister override eder, istersen de override etmeden Django’nun varsayılan davranışını kullanırsın.

------------------------------------------------------------------------------------------------------------------------------------

list(), create(), update(), destroy() → Otomatik çalışan "dev motorlar".

get_queryset(), perform_create(), perform_update() → Motorun çalışırken küçük ayar çekebileceğin vidalar.

Sen sadece vida ayarı yapıyorsun (override ediyorsun), motor zaten çalışıyor.

------------------------------------------------------------------------------------------------------------------------------------
apps.py Django'nun her uygulama (app) için oluşturduğu konfigürasyon dosyasıdır.

Özetle:

“Bu app yüklenirken neler yapılacak?” bilgisini tutar.

Örneğin:

Signal'leri yüklemek

Özel ayarlar yapmak

Gelişmiş konfigürasyonlar eklemek için kullanılır

------------------------------------------------------------------------------------------------------------------------------------
utils.py dosyası = yardımcı fonksiyonlar klasörü

Tek sorumluluğu olan, genellikle “bağımsız” ve “yeniden kullanılabilir” fonksiyonları barındırır.

📌 Neden views.py içine yazmıyoruz?
Çünkü views.py sadece şunlara odaklıdır:

HTTP isteği aldı mı?

Yanıt ne olacak?

Kim erişebilir?

Form geçerli mi?

Ama örneğin:

e-posta göndermek

QR kod üretmek

tarih hesaplamak

şifreyi hash'lemek
gibi şeyler view’in işi değildir.

------------------------------------------------------------------------------------------------------------------------------------

class User {
    String name;

    void printName() {
        System.out.println(this.name);
    }
}
this burada sınıfın örneğini (instance) temsil eder.
Python’da self onun aynısıdır.

Python'da her sınıf metodu tanımlanırken self ilk parametre olmak ZORUNDADIR

Yazmasan TypeError: missing 1 required positional argument hatası alırsın